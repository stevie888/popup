"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/denque";
exports.ids = ["vendor-chunks/denque"];
exports.modules = {

/***/ "(rsc)/./node_modules/denque/index.js":
/*!**************************************!*\
  !*** ./node_modules/denque/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("\n/**\n * Custom implementation of a double ended queue.\n */ function Denque(array, options) {\n    var options = options || {};\n    this._capacity = options.capacity;\n    this._head = 0;\n    this._tail = 0;\n    if (Array.isArray(array)) {\n        this._fromArray(array);\n    } else {\n        this._capacityMask = 0x3;\n        this._list = new Array(4);\n    }\n}\n/**\n * --------------\n *  PUBLIC API\n * -------------\n */ /**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */ Denque.prototype.peekAt = function peekAt(index) {\n    var i = index;\n    // expect a number or return undefined\n    if (i !== (i | 0)) {\n        return void 0;\n    }\n    var len = this.size();\n    if (i >= len || i < -len) return undefined;\n    if (i < 0) i += len;\n    i = this._head + i & this._capacityMask;\n    return this._list[i];\n};\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */ Denque.prototype.get = function get(i) {\n    return this.peekAt(i);\n};\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */ Denque.prototype.peek = function peek() {\n    if (this._head === this._tail) return undefined;\n    return this._list[this._head];\n};\n/**\n * Alias for peek()\n * @returns {*}\n */ Denque.prototype.peekFront = function peekFront() {\n    return this.peek();\n};\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */ Denque.prototype.peekBack = function peekBack() {\n    return this.peekAt(-1);\n};\n/**\n * Returns the current length of the queue\n * @return {Number}\n */ Object.defineProperty(Denque.prototype, \"length\", {\n    get: function length() {\n        return this.size();\n    }\n});\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */ Denque.prototype.size = function size() {\n    if (this._head === this._tail) return 0;\n    if (this._head < this._tail) return this._tail - this._head;\n    else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Add an item at the beginning of the list.\n * @param item\n */ Denque.prototype.unshift = function unshift(item) {\n    if (arguments.length === 0) return this.size();\n    var len = this._list.length;\n    this._head = this._head - 1 + len & this._capacityMask;\n    this._list[this._head] = item;\n    if (this._tail === this._head) this._growArray();\n    if (this._capacity && this.size() > this._capacity) this.pop();\n    if (this._head < this._tail) return this._tail - this._head;\n    else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */ Denque.prototype.shift = function shift() {\n    var head = this._head;\n    if (head === this._tail) return undefined;\n    var item = this._list[head];\n    this._list[head] = undefined;\n    this._head = head + 1 & this._capacityMask;\n    if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n    return item;\n};\n/**\n * Add an item to the bottom of the list.\n * @param item\n */ Denque.prototype.push = function push(item) {\n    if (arguments.length === 0) return this.size();\n    var tail = this._tail;\n    this._list[tail] = item;\n    this._tail = tail + 1 & this._capacityMask;\n    if (this._tail === this._head) {\n        this._growArray();\n    }\n    if (this._capacity && this.size() > this._capacity) {\n        this.shift();\n    }\n    if (this._head < this._tail) return this._tail - this._head;\n    else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */ Denque.prototype.pop = function pop() {\n    var tail = this._tail;\n    if (tail === this._head) return undefined;\n    var len = this._list.length;\n    this._tail = tail - 1 + len & this._capacityMask;\n    var item = this._list[this._tail];\n    this._list[this._tail] = undefined;\n    if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n    return item;\n};\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */ Denque.prototype.removeOne = function removeOne(index) {\n    var i = index;\n    // expect a number or return undefined\n    if (i !== (i | 0)) {\n        return void 0;\n    }\n    if (this._head === this._tail) return void 0;\n    var size = this.size();\n    var len = this._list.length;\n    if (i >= size || i < -size) return void 0;\n    if (i < 0) i += size;\n    i = this._head + i & this._capacityMask;\n    var item = this._list[i];\n    var k;\n    if (index < size / 2) {\n        for(k = index; k > 0; k--){\n            this._list[i] = this._list[i = i - 1 + len & this._capacityMask];\n        }\n        this._list[i] = void 0;\n        this._head = this._head + 1 + len & this._capacityMask;\n    } else {\n        for(k = size - 1 - index; k > 0; k--){\n            this._list[i] = this._list[i = i + 1 + len & this._capacityMask];\n        }\n        this._list[i] = void 0;\n        this._tail = this._tail - 1 + len & this._capacityMask;\n    }\n    return item;\n};\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */ Denque.prototype.remove = function remove(index, count) {\n    var i = index;\n    var removed;\n    var del_count = count;\n    // expect a number or return undefined\n    if (i !== (i | 0)) {\n        return void 0;\n    }\n    if (this._head === this._tail) return void 0;\n    var size = this.size();\n    var len = this._list.length;\n    if (i >= size || i < -size || count < 1) return void 0;\n    if (i < 0) i += size;\n    if (count === 1 || !count) {\n        removed = new Array(1);\n        removed[0] = this.removeOne(i);\n        return removed;\n    }\n    if (i === 0 && i + count >= size) {\n        removed = this.toArray();\n        this.clear();\n        return removed;\n    }\n    if (i + count > size) count = size - i;\n    var k;\n    removed = new Array(count);\n    for(k = 0; k < count; k++){\n        removed[k] = this._list[this._head + i + k & this._capacityMask];\n    }\n    i = this._head + i & this._capacityMask;\n    if (index + count === size) {\n        this._tail = this._tail - count + len & this._capacityMask;\n        for(k = count; k > 0; k--){\n            this._list[i = i + 1 + len & this._capacityMask] = void 0;\n        }\n        return removed;\n    }\n    if (index === 0) {\n        this._head = this._head + count + len & this._capacityMask;\n        for(k = count - 1; k > 0; k--){\n            this._list[i = i + 1 + len & this._capacityMask] = void 0;\n        }\n        return removed;\n    }\n    if (i < size / 2) {\n        this._head = this._head + index + count + len & this._capacityMask;\n        for(k = index; k > 0; k--){\n            this.unshift(this._list[i = i - 1 + len & this._capacityMask]);\n        }\n        i = this._head - 1 + len & this._capacityMask;\n        while(del_count > 0){\n            this._list[i = i - 1 + len & this._capacityMask] = void 0;\n            del_count--;\n        }\n        if (index < 0) this._tail = i;\n    } else {\n        this._tail = i;\n        i = i + count + len & this._capacityMask;\n        for(k = size - (count + index); k > 0; k--){\n            this.push(this._list[i++]);\n        }\n        i = this._tail;\n        while(del_count > 0){\n            this._list[i = i + 1 + len & this._capacityMask] = void 0;\n            del_count--;\n        }\n    }\n    if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n    return removed;\n};\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */ Denque.prototype.splice = function splice(index, count) {\n    var i = index;\n    // expect a number or return undefined\n    if (i !== (i | 0)) {\n        return void 0;\n    }\n    var size = this.size();\n    if (i < 0) i += size;\n    if (i > size) return void 0;\n    if (arguments.length > 2) {\n        var k;\n        var temp;\n        var removed;\n        var arg_len = arguments.length;\n        var len = this._list.length;\n        var arguments_index = 2;\n        if (!size || i < size / 2) {\n            temp = new Array(i);\n            for(k = 0; k < i; k++){\n                temp[k] = this._list[this._head + k & this._capacityMask];\n            }\n            if (count === 0) {\n                removed = [];\n                if (i > 0) {\n                    this._head = this._head + i + len & this._capacityMask;\n                }\n            } else {\n                removed = this.remove(i, count);\n                this._head = this._head + i + len & this._capacityMask;\n            }\n            while(arg_len > arguments_index){\n                this.unshift(arguments[--arg_len]);\n            }\n            for(k = i; k > 0; k--){\n                this.unshift(temp[k - 1]);\n            }\n        } else {\n            temp = new Array(size - (i + count));\n            var leng = temp.length;\n            for(k = 0; k < leng; k++){\n                temp[k] = this._list[this._head + i + count + k & this._capacityMask];\n            }\n            if (count === 0) {\n                removed = [];\n                if (i != size) {\n                    this._tail = this._head + i + len & this._capacityMask;\n                }\n            } else {\n                removed = this.remove(i, count);\n                this._tail = this._tail - leng + len & this._capacityMask;\n            }\n            while(arguments_index < arg_len){\n                this.push(arguments[arguments_index++]);\n            }\n            for(k = 0; k < leng; k++){\n                this.push(temp[k]);\n            }\n        }\n        return removed;\n    } else {\n        return this.remove(i, count);\n    }\n};\n/**\n * Soft clear - does not reset capacity.\n */ Denque.prototype.clear = function clear() {\n    this._list = new Array(this._list.length);\n    this._head = 0;\n    this._tail = 0;\n};\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */ Denque.prototype.isEmpty = function isEmpty() {\n    return this._head === this._tail;\n};\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */ Denque.prototype.toArray = function toArray() {\n    return this._copyArray(false);\n};\n/**\n * -------------\n *   INTERNALS\n * -------------\n */ /**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */ Denque.prototype._fromArray = function _fromArray(array) {\n    var length = array.length;\n    var capacity = this._nextPowerOf2(length);\n    this._list = new Array(capacity);\n    this._capacityMask = capacity - 1;\n    this._tail = length;\n    for(var i = 0; i < length; i++)this._list[i] = array[i];\n};\n/**\n *\n * @param fullCopy\n * @param size Initialize the array with a specific size. Will default to the current list size\n * @returns {Array}\n * @private\n */ Denque.prototype._copyArray = function _copyArray(fullCopy, size) {\n    var src = this._list;\n    var capacity = src.length;\n    var length = this.length;\n    size = size | length;\n    // No prealloc requested and the buffer is contiguous\n    if (size == length && this._head < this._tail) {\n        // Simply do a fast slice copy\n        return this._list.slice(this._head, this._tail);\n    }\n    var dest = new Array(size);\n    var k = 0;\n    var i;\n    if (fullCopy || this._head > this._tail) {\n        for(i = this._head; i < capacity; i++)dest[k++] = src[i];\n        for(i = 0; i < this._tail; i++)dest[k++] = src[i];\n    } else {\n        for(i = this._head; i < this._tail; i++)dest[k++] = src[i];\n    }\n    return dest;\n};\n/**\n * Grows the internal list array.\n * @private\n */ Denque.prototype._growArray = function _growArray() {\n    if (this._head != 0) {\n        // double array size and copy existing data, head to end, then beginning to tail.\n        var newList = this._copyArray(true, this._list.length << 1);\n        this._tail = this._list.length;\n        this._head = 0;\n        this._list = newList;\n    } else {\n        this._tail = this._list.length;\n        this._list.length <<= 1;\n    }\n    this._capacityMask = this._capacityMask << 1 | 1;\n};\n/**\n * Shrinks the internal list array.\n * @private\n */ Denque.prototype._shrinkArray = function _shrinkArray() {\n    this._list.length >>>= 1;\n    this._capacityMask >>>= 1;\n};\n/**\n * Find the next power of 2, at least 4\n * @private\n * @param {number} num \n * @returns {number}\n */ Denque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {\n    var log2 = Math.log(num) / Math.log(2);\n    var nextPow2 = 1 << log2 + 1;\n    return Math.max(nextPow2, 4);\n};\nmodule.exports = Denque;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/denque/index.js\n");

/***/ })

};
;