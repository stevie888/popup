"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lru.min";
exports.ids = ["vendor-chunks/lru.min"];
exports.modules = {

/***/ "(rsc)/./node_modules/lru.min/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/lru.min/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createLRU = void 0;\nconst createLRU = (options)=>{\n    let { max } = options;\n    if (!(Number.isInteger(max) && max > 0)) throw new TypeError(\"`max` must be a positive integer\");\n    let size = 0;\n    let head = 0;\n    let tail = 0;\n    let free = [];\n    const { onEviction } = options;\n    const keyMap = new Map();\n    const keyList = new Array(max).fill(undefined);\n    const valList = new Array(max).fill(undefined);\n    const next = new Array(max).fill(0);\n    const prev = new Array(max).fill(0);\n    const setTail = (index, type)=>{\n        if (index === tail) return;\n        const nextIndex = next[index];\n        const prevIndex = prev[index];\n        if (index === head) head = nextIndex;\n        else if (type === \"get\" || prevIndex !== 0) next[prevIndex] = nextIndex;\n        if (nextIndex !== 0) prev[nextIndex] = prevIndex;\n        next[tail] = index;\n        prev[index] = tail;\n        next[index] = 0;\n        tail = index;\n    };\n    const _evict = ()=>{\n        const evictHead = head;\n        const key = keyList[evictHead];\n        onEviction === null || onEviction === void 0 ? void 0 : onEviction(key, valList[evictHead]);\n        keyMap.delete(key);\n        keyList[evictHead] = undefined;\n        valList[evictHead] = undefined;\n        head = next[evictHead];\n        if (head !== 0) prev[head] = 0;\n        size--;\n        if (size === 0) head = tail = 0;\n        free.push(evictHead);\n        return evictHead;\n    };\n    return {\n        /** Adds a key-value pair to the cache. Updates the value if the key already exists. */ set (key, value) {\n            if (key === undefined) return;\n            let index = keyMap.get(key);\n            if (index === undefined) {\n                index = size === max ? _evict() : free.length > 0 ? free.pop() : size;\n                keyMap.set(key, index);\n                keyList[index] = key;\n                size++;\n            } else onEviction === null || onEviction === void 0 ? void 0 : onEviction(key, valList[index]);\n            valList[index] = value;\n            if (size === 1) head = tail = index;\n            else setTail(index, \"set\");\n        },\n        /** Retrieves the value for a given key and moves the key to the most recent position. */ get (key) {\n            const index = keyMap.get(key);\n            if (index === undefined) return;\n            if (index !== tail) setTail(index, \"get\");\n            return valList[index];\n        },\n        /** Retrieves the value for a given key without changing its position. */ peek: (key)=>{\n            const index = keyMap.get(key);\n            return index !== undefined ? valList[index] : undefined;\n        },\n        /** Checks if a key exists in the cache. */ has: (key)=>keyMap.has(key),\n        /** Iterates over all keys in the cache, from most recent to least recent. */ *keys () {\n            let current = tail;\n            for(let i = 0; i < size; i++){\n                yield keyList[current];\n                current = prev[current];\n            }\n        },\n        /** Iterates over all values in the cache, from most recent to least recent. */ *values () {\n            let current = tail;\n            for(let i = 0; i < size; i++){\n                yield valList[current];\n                current = prev[current];\n            }\n        },\n        /** Iterates over `[key, value]` pairs in the cache, from most recent to least recent. */ *entries () {\n            let current = tail;\n            for(let i = 0; i < size; i++){\n                yield [\n                    keyList[current],\n                    valList[current]\n                ];\n                current = prev[current];\n            }\n        },\n        /** Iterates over each value-key pair in the cache, from most recent to least recent. */ forEach: (callback)=>{\n            let current = tail;\n            for(let i = 0; i < size; i++){\n                const key = keyList[current];\n                const value = valList[current];\n                callback(value, key);\n                current = prev[current];\n            }\n        },\n        /** Deletes a key-value pair from the cache. */ delete (key) {\n            const index = keyMap.get(key);\n            if (index === undefined) return false;\n            onEviction === null || onEviction === void 0 ? void 0 : onEviction(key, valList[index]);\n            keyMap.delete(key);\n            free.push(index);\n            keyList[index] = undefined;\n            valList[index] = undefined;\n            const prevIndex = prev[index];\n            const nextIndex = next[index];\n            if (prevIndex !== 0) next[prevIndex] = nextIndex;\n            if (nextIndex !== 0) prev[nextIndex] = prevIndex;\n            if (index === head) head = nextIndex;\n            if (index === tail) tail = prevIndex;\n            size--;\n            return true;\n        },\n        /** Evicts the oldest item or the specified number of the oldest items from the cache. */ evict: (number)=>{\n            let toPrune = Math.min(number, size);\n            while(toPrune > 0){\n                _evict();\n                toPrune--;\n            }\n        },\n        /** Clears all key-value pairs from the cache. */ clear () {\n            if (typeof onEviction === \"function\") {\n                const iterator = keyMap.values();\n                for(let result = iterator.next(); !result.done; result = iterator.next())onEviction(keyList[result.value], valList[result.value]);\n            }\n            keyMap.clear();\n            keyList.fill(undefined);\n            valList.fill(undefined);\n            free = [];\n            size = 0;\n            head = tail = 0;\n        },\n        /** Resizes the cache to a new maximum size, evicting items if necessary. */ resize: (newMax)=>{\n            if (!(Number.isInteger(newMax) && newMax > 0)) throw new TypeError(\"`max` must be a positive integer\");\n            if (newMax === max) return;\n            if (newMax < max) {\n                let current = tail;\n                const preserve = Math.min(size, newMax);\n                const remove = size - preserve;\n                const newKeyList = new Array(newMax);\n                const newValList = new Array(newMax);\n                const newNext = new Array(newMax);\n                const newPrev = new Array(newMax);\n                for(let i = 1; i <= remove; i++)onEviction === null || onEviction === void 0 ? void 0 : onEviction(keyList[i], valList[i]);\n                for(let i = preserve - 1; i >= 0; i--){\n                    newKeyList[i] = keyList[current];\n                    newValList[i] = valList[current];\n                    newNext[i] = i + 1;\n                    newPrev[i] = i - 1;\n                    keyMap.set(newKeyList[i], i);\n                    current = prev[current];\n                }\n                head = 0;\n                tail = preserve - 1;\n                size = preserve;\n                keyList.length = newMax;\n                valList.length = newMax;\n                next.length = newMax;\n                prev.length = newMax;\n                for(let i = 0; i < preserve; i++){\n                    keyList[i] = newKeyList[i];\n                    valList[i] = newValList[i];\n                    next[i] = newNext[i];\n                    prev[i] = newPrev[i];\n                }\n                free = [];\n                for(let i = preserve; i < newMax; i++)free.push(i);\n            } else {\n                const fill = newMax - max;\n                keyList.push(...new Array(fill).fill(undefined));\n                valList.push(...new Array(fill).fill(undefined));\n                next.push(...new Array(fill).fill(0));\n                prev.push(...new Array(fill).fill(0));\n            }\n            max = newMax;\n        },\n        /** Returns the maximum number of items that can be stored in the cache. */ get max () {\n            return max;\n        },\n        /** Returns the number of items currently stored in the cache. */ get size () {\n            return size;\n        },\n        /** Returns the number of currently available slots in the cache before reaching the maximum size. */ get available () {\n            return max - size;\n        }\n    };\n};\nexports.createLRU = createLRU;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/lru.min/lib/index.js\n");

/***/ })

};
;